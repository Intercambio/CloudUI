//
//  StyleKit.swift
//  Intercambio
//
//  Created by Tobias Kräntzer on 22.02.17.
//  Copyright © 2017 Tobias Kräntzer. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class StyleKit : NSObject {

    //// Drawing Methods

    public dynamic class func drawProgressCircle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit, color: UIColor = UIColor(red: 0.984, green: 0.180, blue: 0.345, alpha: 1.000), backgroundColor: UIColor = UIColor(red: 0.898, green: 0.898, blue: 0.918, alpha: 1.000), progress: CGFloat = 0.561, isIndeterminate: Bool = true, phase: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)



        //// Variable Declarations
        let progressArcEnd: CGFloat = isIndeterminate ? 160 : 90 - progress * 360
        let bg = !isIndeterminate
        let rotation: CGFloat = isIndeterminate ? -1 * 360 * phase : 0

        if (bg) {
            //// Background Drawing
            context.saveGState()
            context.translateBy(x: 14, y: 14)

            let backgroundPath = UIBezierPath(ovalIn: CGRect(x: -12.5, y: -12.5, width: 25, height: 25))
            backgroundColor.setStroke()
            backgroundPath.lineWidth = 3
            backgroundPath.stroke()

            context.restoreGState()
        }


        //// Arc Drawing
        context.saveGState()
        context.translateBy(x: 14, y: 14)
        context.rotate(by: -rotation * CGFloat.pi/180)

        let arcRect = CGRect(x: -12.5, y: -12.5, width: 25, height: 25)
        let arcPath = UIBezierPath()
        arcPath.addArc(withCenter: CGPoint(x: arcRect.midX, y: arcRect.midY), radius: arcRect.width / 2, startAngle: -90 * CGFloat.pi/180, endAngle: -progressArcEnd * CGFloat.pi/180, clockwise: true)

        color.setStroke()
        arcPath.lineWidth = 3
        arcPath.lineCapStyle = .round
        arcPath.stroke()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawDownload(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit, color: UIColor = UIColor(red: 0.984, green: 0.180, blue: 0.345, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 14, y: 12))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 26), controlPoint1: CGPoint(x: 14, y: 13.56), controlPoint2: CGPoint(x: 14, y: 26))
        color.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.lineCapStyle = .round
        bezierPath.stroke()


        //// Symbol Drawing
        context.saveGState()
        context.translateBy(x: 0, y: -100)

        //// Warning: Symbol 'Canvas 2' is unavailable!

        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 14, y: 26))
        bezier2Path.addLine(to: CGPoint(x: 18, y: 22))
        color.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.lineCapStyle = .round
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 14, y: 26))
        bezier3Path.addLine(to: CGPoint(x: 10, y: 22))
        color.setStroke()
        bezier3Path.lineWidth = 2
        bezier3Path.lineCapStyle = .round
        bezier3Path.stroke()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath()
        rectanglePath.move(to: CGPoint(x: 20, y: 18.5))
        rectanglePath.addCurve(to: CGPoint(x: 22.53, y: 18.5), controlPoint1: CGPoint(x: 20, y: 18.5), controlPoint2: CGPoint(x: 21, y: 18.5))
        rectanglePath.addCurve(to: CGPoint(x: 25.1, y: 12.02), controlPoint1: CGPoint(x: 26.38, y: 18.5), controlPoint2: CGPoint(x: 28.94, y: 15.26))
        rectanglePath.addCurve(to: CGPoint(x: 19.97, y: 5.54), controlPoint1: CGPoint(x: 27.66, y: 8.13), controlPoint2: CGPoint(x: 25.1, y: 4.25))
        rectanglePath.addCurve(to: CGPoint(x: 7.14, y: 8.13), controlPoint1: CGPoint(x: 16.76, y: 1.01), controlPoint2: CGPoint(x: 4.58, y: 2.95))
        rectanglePath.addCurve(to: CGPoint(x: 4.58, y: 18.5), controlPoint1: CGPoint(x: -0.55, y: 8.13), controlPoint2: CGPoint(x: -0.55, y: 18.5))
        rectanglePath.addCurve(to: CGPoint(x: 8, y: 18.5), controlPoint1: CGPoint(x: 6, y: 18.5), controlPoint2: CGPoint(x: 8, y: 18.5))
        color.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.lineCapStyle = .round
        rectanglePath.stroke()
        
        context.restoreGState()

    }

    //// Generated Images

    public dynamic class func imageOfProgressCircle(color: UIColor = UIColor(red: 0.984, green: 0.180, blue: 0.345, alpha: 1.000), backgroundColor: UIColor = UIColor(red: 0.898, green: 0.898, blue: 0.918, alpha: 1.000), progress: CGFloat = 0.561, isIndeterminate: Bool = true, phase: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
            StyleKit.drawProgressCircle(color: color, backgroundColor: backgroundColor, progress: progress, isIndeterminate: isIndeterminate, phase: phase)

        let imageOfProgressCircle = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfProgressCircle
    }

    public dynamic class func imageOfDownload(color: UIColor = UIColor(red: 0.984, green: 0.180, blue: 0.345, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
            StyleKit.drawDownload(color: color)

        let imageOfDownload = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfDownload
    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
